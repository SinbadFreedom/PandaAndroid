apply plugin: 'com.android.application'

android {
    signingConfigs {
        config {
            keyAlias 'python3'
            keyPassword 'ljhdhr'
            storeFile file('D:/workplace/git/PythonDocAndroid/key/key.jks')
            storePassword 'ljhdhr'
        }
    }
    dataBinding {
        enabled = true
    }
    compileSdkVersion rootProject.ext.compileSdkVersion
    defaultConfig {
        applicationId "com.panda_doc.python"
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode 1
        versionName "1.0.5"

        testInstrumentationRunner 'androidx.test.runner.AndroidJUnitRunner'
    }
    buildTypes {
        debug {
            minifyEnabled true
            useProguard true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            testProguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguardTest-rules.pro'
            signingConfig signingConfigs.config
        }
        release {
            minifyEnabled true
            useProguard true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            testProguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguardTest-rules.pro'
            applicationVariants.all { variant ->
                variant.outputs.all {
                    def appName = "PythonDocAndroid"
                    outputFileName = appName + "_${defaultConfig.versionName}.apk"
                }
            }
            signingConfig signingConfigs.config
        }
    }
//    flavorDimensions "default"
//    // If you need to add more flavors, consider using flavor dimensions.
//    productFlavors {
//        mock {
//            dimension "default"
//            applicationIdSuffix = ".mock"
//        }
//        prod {
//            dimension "default"
//        }
//    }
//    // Remove mockRelease as it's not needed.
//    android.variantFilter { variant ->
//        if (variant.buildType.name == 'release'
//                && variant.getFlavors().get(0).name == 'mock') {
//            variant.setIgnore(true)
//        }
//    }
    // Always show the result of every unit test, even if it passes.
    testOptions.unitTests.all {
        testLogging {
            events 'passed', 'skipped', 'failed', 'standardOut', 'standardError'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

/*
 Dependency versions are defined in the top level build.gradle file. This helps keeping track of
 all versions in a single place. This improves readability and helps managing project complexity.
 */
dependencies {
    def lifecycle_version = "2.0.0"

    // App dependencies
    implementation "androidx.appcompat:appcompat:$appCompatVersion"
    implementation "androidx.cardview:cardview:$cardVersion"
    implementation "com.google.android.material:material:$materialVersion"
    implementation "androidx.recyclerview:recyclerview:$recyclerViewVersion"
    implementation "androidx.annotation:annotation:$androidXAnnotations"
    implementation "androidx.legacy:legacy-support-v4:$androidXLegacySupport"
    implementation "androidx.test.espresso:espresso-idling-resource:$espressoVersion"
    implementation "com.google.guava:guava:$rootProject.guavaVersion"
    implementation "androidx.room:room-runtime:$roomVersion"
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    annotationProcessor "androidx.room:room-compiler:$roomVersion"

    // Dependencies for local unit tests
    testImplementation "junit:junit:$rootProject.ext.junitVersion"
    testImplementation "org.mockito:mockito-all:$rootProject.ext.mockitoVersion"
    testImplementation "org.hamcrest:hamcrest-all:$rootProject.ext.hamcrestVersion"

    // Dependencies for Android unit tests
    androidTestImplementation "junit:junit:$rootProject.ext.junitVersion"
    androidTestImplementation "org.mockito:mockito-core:$rootProject.ext.mockitoVersion"
    androidTestImplementation "com.google.dexmaker:dexmaker:$dexMaker"
    androidTestImplementation "com.google.dexmaker:dexmaker-mockito:$dexMaker"

    // Android Testing Support Library - Instrumented testing
    androidTestImplementation "androidx.test:runner:$androidXTestVersion"
    androidTestImplementation "androidx.test:rules:$androidXTestVersion"
    androidTestImplementation "androidx.room:room-testing:$roomVersion"
    androidTestImplementation "androidx.test.espresso:espresso-core:$espressoVersion"
    androidTestImplementation "androidx.test.espresso:espresso-contrib:$espressoVersion"
    androidTestImplementation "androidx.test.espresso:espresso-intents:$espressoVersion"
    androidTestImplementation "androidx.test.espresso.idling:idling-concurrent:$espressoVersion"
    implementation "androidx.test.espresso:espresso-idling-resource:$espressoVersion"

    // Resolve conflicts between main and test APK:
    androidTestImplementation "androidx.annotation:annotation:$androidXAnnotations"
    androidTestImplementation "androidx.legacy:legacy-support-v4:$androidXLegacySupport"
    androidTestImplementation "androidx.recyclerview:recyclerview:$recyclerViewVersion"
    androidTestImplementation "androidx.appcompat:appcompat:$appCompatVersion"
    androidTestImplementation "com.google.android.material:material:$materialVersion"
    implementation 'com.android.volley:volley:1.1.1'
    implementation 'android.arch.navigation:navigation-fragment:1.0.0'
    implementation 'com.tencent.mm.opensdk:wechat-sdk-android-with-mta:5.3.1'

    // ViewModel and LiveData
    implementation "androidx.lifecycle:lifecycle-extensions:$lifecycle_version"

    // alternatively - just ViewModel

    // alternatively - just LiveData
    implementation "androidx.lifecycle:lifecycle-livedata:$lifecycle_version"

    // alternatively - Lifecycles only (no ViewModel or LiveData). Some UI

    //     AndroidX libraries use this lightweight import for Lifecycle
    implementation "androidx.lifecycle:lifecycle-runtime:$lifecycle_version"

    // alternately - if using Java8, use the following instead of lifecycle-compiler
    implementation "androidx.lifecycle:lifecycle-common-java8:$lifecycle_version"

    // optional - ReactiveStreams support for LiveData

    // optional - Test helpers for LiveData
    testImplementation "androidx.arch.core:core-testing:$lifecycle_version"
}
